name: Test and Deploy to Staging

# Triggers on push to 'staging' or manual dispatch
on:
  push:
    branches:
      - staging
  workflow_dispatch:

jobs:
  test-and-deploy:
    name: Test and Deploy
    runs-on: ubuntu-latest # GitHub's temporary virtual server
    
    steps:
      # Step 1: Check out the repository code
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Securely copy the app folder contents to /tmp/deploy_app
      - name: Securely Copy App Files to Temp
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.STAGING_SSH_HOST }}
          username: ${{ secrets.STAGING_SSH_USER }}
          password: ${{ secrets.STAGING_SSH_PASSWORD }} # Or use key: ${{ secrets.STAGING_SSH_KEY }}
          port: 22
          source: "one_fm_google_integration/" # Source folder at repo root
          target: "/tmp/deploy_app"                     # Temp destination on server
          rm: true                                     # Clean the temp directory first

      # Step 3: Move files to final location, set up, test, migrate, restart
      - name: Deploy App and Run Commands
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.STAGING_SSH_HOST }}
          username: ${{ secrets.STAGING_SSH_USER }}
          password: ${{ secrets.STAGING_SSH_PASSWORD }} # Or use key
          port: 22
          script: |
            set -e # Exit script on first error
            
            echo "==== 1. Preparing target directory ===="
            BENCH_PATH="/home/frappe/frappe-bench" # Using direct path
            APP_NAME="one_fm_google_integration"
            APP_TARGET_PATH="$BENCH_PATH/apps/$APP_NAME"
            APP_SOURCE_PATH="/tmp/deploy_app"
            
            # Ensure target directory exists and is empty before moving contents
            rm -rf "$APP_TARGET_PATH"
            mkdir -p "$APP_TARGET_PATH" 
            
            echo "==== 2. Moving app files into final place ===="
            # Move the *CONTENTS* of the temp source dir into the target app dir
            # Using 'shopt' includes hidden files if any exist
            shopt -s dotglob
            mv "$APP_SOURCE_PATH"/* "$APP_TARGET_PATH"/
            shopt -u dotglob
            
            echo "==== 3. Setting ownership and permissions ===="
            sudo chown -R frappe:frappe "$APP_TARGET_PATH"
            find "$APP_TARGET_PATH" -type d -exec chmod 755 {} \;
            find "$APP_TARGET_PATH" -type f -exec chmod 644 {} \;

            echo "==== 4. Verifying final app structure (Debug) ===="
            echo "--- Listing contents of $APP_TARGET_PATH ---"
            ls -al "$APP_TARGET_PATH" 
            echo "--- Checking specifically for hooks.py and __init__.py ---"
            ls -l "$APP_TARGET_PATH/hooks.py" || echo "hooks.py MISSING! (THIS MUST SUCCEED)"
            ls -l "$APP_TARGET_PATH/__init__.py" || echo "__init__.py MISSING! (THIS MUST SUCCEED)"
            
            echo "==== 5. Setting PYTHONPATH (Best effort, might not be needed) ===="
            export PYTHONPATH=$BENCH_PATH/apps:$PYTHONPATH
            echo "PYTHONPATH is now: $PYTHONPATH"

            echo "==== 6. Navigating to Bench Directory ===="
            cd "$BENCH_PATH"
            
            echo "==== 7. Restarting Bench Services (Attempt 1) ===="
            # Restart services to ensure Python environment recognizes the new files
            sudo /home/frappe/.local/bin/bench restart
            sleep 5 # Allow services to restart fully

            echo "==== 8. Refreshing bench requirements ===="
            # This helps install dependencies for Frappe itself and potentially other apps
            /home/frappe/.local/bin/bench setup requirements
            
            echo "==== 9. Registering the app with the site ===="
            # This should succeed now that files are in the correct place
            /home/frappe/.local/bin/bench --site ${{ secrets.STAGING_SITE_NAME }} install-app "$APP_NAME"
            
            echo "==== 10. Running Unit Tests ===="
            # Enable tests and run them for the specific app
            /home/frappe/.local/bin/bench --site ${{ secrets.STAGING_SITE_NAME }} set-config allow_tests true
            /home/frappe/.local/bin/bench --site ${{ secrets.STAGING_SITE_NAME }} run-tests --app "$APP_NAME" || echo "Tests failed or no tests found, continuing..."
            
            # Step 11: Installing App Python dependencies (Check if requirements.txt exists)
            # If "one_fm_google_integration/requirements.txt" exists, uncomment the following:
            # echo "==== 11. Installing App Python dependencies ===="
            # /home/frappe/.local/bin/bench pip install -r "$APP_TARGET_PATH/requirements.txt"
            
            echo "==== 12. Running Database Migrations ===="
            # Apply any database schema changes from the app
            /home/frappe/.local/bin/bench --site ${{ secrets.STAGING_SITE_NAME }} migrate
            
            echo "==== 13. Restarting Bench Services (Attempt 2) ===="
            # Final restart after migrations
            sudo /home/frappe/.local/bin/bench restart
            
            echo "✅ Deployment to staging complete!"

      # Step 4: Send Success Notification (Commented Out)
      # - name: Send Success Notification
      #   if: success()
      #   uses: dawidd6/action-send-mail@v3
      #   with:
      #     server_address: ${{ secrets.MAIL_HOST }}
      #     server_port: ${{ secrets.MAIL_PORT }}
      #     username: ${{ secrets.MAIL_USER }}
      #     password: ${{ secrets.MAIL_PASSWORD }}
      #     subject: "✅ DEPLOYMENT SUCCESS: one_fm_google_integration to Staging"
      #     to: ${{ secrets.MAIL_TO }}
      #     from: "GitHub Actions Bot <${{ secrets.MAIL_USER }}>"
      #     body: |
      #       Successfully deployed commit ${{ github.sha }} to the staging server.
      #       Commit by: ${{ github.actor }}
      #       See commit: ${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}

      # Step 5: Send Failure Notification (Commented Out)
      # - name: Send Failure Notification
      #   if: failure()
      #   uses: dawidd6/action-send-mail@v3
      #   with:
      #     server_address: ${{ secrets.MAIL_HOST }}
      #     server_port: ${{ secrets.MAIL_PORT }}
      #     username: ${{ secrets.MAIL_USER }}
      #     password: ${{ secrets.MAIL_PASSWORD }}
      #     subject: "❌ DEPLOYMENT FAILED: one_fm_google_integration to Staging"
      #     to: ${{ secrets.MAIL_TO }}
      #     from: "GitHub Actions Bot <${{ secrets.MAIL_USER }}>"
      #     body: |
      #       Failed to deploy commit ${{ github.sha }} to the staging server.
            
      #       Check the pipeline log for details:
      #       ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

