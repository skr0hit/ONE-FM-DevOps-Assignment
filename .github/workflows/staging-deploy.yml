name: Test and Deploy to Staging

# This pipeline will run on:
# 1. Any push to the 'staging' branch
# 2. A manual run from the "Actions" tab
on:
  push:
    branches:
      - staging
  workflow_dispatch:

jobs:
  test-and-deploy:
    name: Test and Deploy
    runs-on: ubuntu-latest # This is the temporary virtual server from GitHub
    
    steps:
      # Step 1: Check out your repository's code (for commit info)
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: SSH into your EC2 server and run all the deploy commands
      - name: SSH, Test, Pull, and Deploy
        uses: appleboy/ssh-action@master
        with:
          # These are the GitHub Secrets you will set in the next step
          host: ${{ secrets.STAGING_SSH_HOST }}
          username: ${{ secrets.STAGING_SSH_USER }}
          password: ${{ secrets.STAGING_SSH_PASSWORD }}
          port: 22
          script: |
            # 'set -e' makes the script fail if any command fails
            set -e
            
            echo "==== 1. Navigating to Bench Directory ===="
            cd ${{ secrets.BENCH_PATH }}
            
            echo "==== 2. Pulling latest app changes from staging branch ===="
            cd apps/one_fm_google_integration

            # --- START OF FIX ---
            # 1. Fetch all branch info from the remote repo
            git fetch origin
            
            # 2. Force-checkout the staging branch.
            # This creates the local 'staging' branch if it doesn't exist
            # and resets it to match the remote's staging branch.
            git checkout -B staging origin/staging
            
            # 3. Pull just to be 100% sure we are up to date.
            git pull origin staging
            
            # --- END OF FIX ---

            cd ..
            cd ..
            
            echo "==== 3. Running Unit Tests ===="
            # We use the full path to bench to avoid PATH errors
            /home/frappe/.local/bin/bench --site ${{ secrets.STAGING_SITE_NAME }} run-tests --app one_fm_google_integration
            
            echo "==== 4. Installing Python dependencies ===="
            # This installs any new libraries from your app's requirements.txt
            /home/frappe/.local/bin/bench pip install -r apps/one_fm_google_integration/requirements.txt
            
            echo "==== 5. Running Database Migrations ===="
            /home/frappe/.local/bin/bench --site ${{ secrets.STAGING_SITE_NAME }} migrate
            
            echo "==== 6. Restarting Bench Services ===="
            # We use sudo + full path for the restart command
            sudo /home/frappe/.local/bin/bench restart
            
            echo "✅ Deployment to staging complete!"

      # Step 3: Send an email if the deployment was successful
      - name: Send Success Notification
        if: success() # Only runs if all previous steps worked
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ secrets.MAIL_HOST }}
          server_port: ${{ secrets.MAIL_PORT }}
          username: ${{ secrets.MAIL_USER }}
          password: ${{ secrets.MAIL_PASSWORD }}
          subject: "✅ DEPLOYMENT SUCCESS: one_fm_google_integration to Staging"
          to: ${{ secrets.MAIL_TO }}
          from: "GitHub Actions Bot <${{ secrets.MAIL_USER }}>"
          body: |
            Successfully deployed commit ${{ github.sha }} to the staging server.
            Commit by: ${{ github.actor }}
            See commit: ${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}

      # Step 4: Send an email if the deployment failed
      - name: Send Failure Notification
        if: failure() # Only runs if any step failed
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ secrets.MAIL_HOST }}
          server_port: ${{ secrets.MAIL_PORT }}
          username: ${{ secrets.MAIL_USER }}
          password: ${{ secrets.MAIL_PASSWORD }}
          subject: "❌ DEPLOYMENT FAILED: one_fm_google_integration to Staging"
          to: ${{ secrets.MAIL_TO }}
          from: "GitHub Actions Bot <${{ secrets.MAIL_USER }}>"
          body: |
            Failed to deploy commit ${{ github.sha }} to the staging server.
            
            Check the pipeline log for details:
            ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}