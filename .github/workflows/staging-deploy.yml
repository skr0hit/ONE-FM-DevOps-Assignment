name: Test and Deploy to Staging

# Triggers on push to 'staging' branch or manual dispatch
on:
  push:
    branches:
      - staging
  workflow_dispatch: # Trigger Manual Deployment if needed

jobs:
  test-and-deploy:
    name: Test and Deploy
    runs-on: ubuntu-latest 
    
    steps:
      # Step 1: Check out the repository code
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Securely copy the app folder contents to /tmp/deploy_app
      - name: Securely Copy App Files to Temp
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.STAGING_SSH_HOST }} # IP of the Staging server
          username: ${{ secrets.STAGING_SSH_USER }} # Log in as frappe user
          password: ${{ secrets.STAGING_SSH_PASSWORD }} # used password but you can use SSH key 
          port: 22
          source: "one_fm_google_integration/" # Source folder to copy from the github runner to our ec2 server
          target: "/tmp/deploy_app"                     # Temp destination on server
          rm: true                                     # Clean the temp directory first

      # Step 3: Move files to final location, set up, test, migrate, restart
      - name: Deploy App and Run Commands
        uses: appleboy/ssh-action@master #connects to our staging ec2 server via SSH and runs the commands listed in the script block.
        with:
          host: ${{ secrets.STAGING_SSH_HOST }}
          username: ${{ secrets.STAGING_SSH_USER }}
          password: ${{ secrets.STAGING_SSH_PASSWORD }} 
          port: 22
          script: |
            set -e # Exit script if there is any error
            
            echo "==== 1. Preparing target directory ===="
            
            BENCH_PATH="/home/frappe/frappe-bench"
            APP_NAME="one_fm_google_integration"
            APP_TARGET_PATH="$BENCH_PATH/apps/$APP_NAME"
            APP_SOURCE_PATH="/tmp/deploy_app/" # Where scp put the files from ghub runner to ec2
            
            # Removes target directory if exists and then creates an empty one
            rm -rf "$APP_TARGET_PATH"
            mkdir -p "$APP_TARGET_PATH" 
            
            echo "==== 2. Copying app files into final place using rsync ===="

            # Use rsync to copy the contents of the source directory. -a preserves permissions, ownership and copies directories recursively
            rsync -a "$APP_SOURCE_PATH" "$APP_TARGET_PATH"/

            
            echo "==== 3. Setting ownership ===="
            
            # Ownership might be needed again after rsync so giving ownership to frappe use and group
            sudo chown -R frappe:frappe "$APP_TARGET_PATH"
            
            # Permissions should be preserved by rsync -a, but chmod can be added if needed
            # find "$APP_TARGET_PATH" -type d -exec chmod 755 {} \;
            # find "$APP_TARGET_PATH" -type f -exec chmod 644 {} \;

            # echo "==== 4. Verifying final app structure (Debug) ===="
            
            # echo "--- Listing contents of $APP_TARGET_PATH ---"
            # ls -al "$APP_TARGET_PATH" 
            # echo "--- Checking specifically for hooks.py and __init__.py ---"
            # ls -l "$APP_TARGET_PATH/hooks.py" || echo "hooks.py MISSING! (MUST SUCCEED)"
            # ls -l "$APP_TARGET_PATH/__init__.py" || echo "__init__.py MISSING! (MUST SUCCEED)"
            
            echo "==== 5. Setting PYTHONPATH ===="

            # Modifies the PYTHONPATH environment variable for the current script execution. 
            # It adds the ~/frappe-bench/apps directory to the list of places Python looks for modules.
            export PYTHONPATH=$BENCH_PATH/apps:$PYTHONPATH
            echo "PYTHONPATH is now: $PYTHONPATH"

            echo "==== 6. Navigating to Bench Directory ===="
            cd "$BENCH_PATH"
            
            echo "==== 7. Restarting Bench Services (Attempt 1) ===="
            sudo /home/frappe/.local/bin/bench restart
            sleep 5 

            echo "==== 8. Registering the app with the site ===="
            
            # Runs the bench install-app command for our app (one_fm_google_integration) on your specific site (staging.local).
            /home/frappe/.local/bin/bench --site ${{ secrets.STAGING_SITE_NAME }} install-app "$APP_NAME"
            
            echo "==== 10. Running Unit Tests ===="
            /home/frappe/.local/bin/bench --site ${{ secrets.STAGING_SITE_NAME }} set-config allow_tests true
            /home/frappe/.local/bin/bench --site ${{ secrets.STAGING_SITE_NAME }} run-tests --app "$APP_NAME" || echo "Tests failed or no tests found, continuing..."
            
            echo "==== 12. Running Database Migrations ===="
            
            #This applies any database schema changes (like new tables/DocTypes, added fields, modified field types) defined in your application's code.
            /home/frappe/.local/bin/bench --site ${{ secrets.STAGING_SITE_NAME }} migrate
            
            echo "==== 13. Restarting Bench Services (Attempt 2) ===="
            sudo /home/frappe/.local/bin/bench restart
            
            echo "✅ Deployment to staging complete!"

     # Step 4: Send Success Notification
      - name: Send Success Notification
        if: success() # Only runs if deploy succeeds
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ secrets.MAIL_HOST }}
          server_port: ${{ secrets.MAIL_PORT }}
          username: ${{ secrets.MAIL_USER }}
          password: ${{ secrets.MAIL_PASSWORD }}
          subject: "✅ DEPLOYMENT SUCCESS: one_fm_google_integration to Staging"
          to: ${{ secrets.MAIL_TO }}
          from: "GitHub Actions Bot <${{ secrets.MAIL_USER }}>" # Optional: Define sender name
          body: |
            Successfully deployed commit ${{ github.sha }} to the staging server.
            Commit by: ${{ github.actor }}
            See commit: ${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}

      # Step 5: Send Failure Notification
      - name: Send Failure Notification
        if: failure() # Only runs if deploy fails
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ secrets.MAIL_HOST }}
          server_port: ${{ secrets.MAIL_PORT }}
          username: ${{ secrets.MAIL_USER }}
          password: ${{ secrets.MAIL_PASSWORD }}
          subject: "❌ DEPLOYMENT FAILED: one_fm_google_integration to Staging"
          to: ${{ secrets.MAIL_TO }}
          from: "GitHub Actions Bot <${{ secrets.MAIL_USER }}>" # Optional: Define sender name
          body: |
            Failed to deploy commit ${{ github.sha }} to the staging server.
            
            Check the pipeline log for details:
            ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
  
